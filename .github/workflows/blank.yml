# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
  test:
      name: Test
      runs-on: ubuntu-latest
      needs: build

      steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
  
      - name: Run unit tests
        run: |
          pytest --maxfail=1 --disable-warnings -q
  
      - name: Code coverage
        run: |
          # Assuming you use coverage.py
          coverage run -m pytest
          coverage report
          coverage html
        continue-on-error: true
  
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage-report/

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to staging
      run: |
        # Add your deployment script or command here
        echo "Deploying to staging environment..."
        # Example: scp -r ./dist user@staging-server:/path/to/deploy

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build, test, deploy]
    if: failure() # This ensures the notification step runs only on failure

    steps:
    - name: Send notification
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"CI/CD Pipeline failed!"}' $SLACK_WEBHOOK_URL

